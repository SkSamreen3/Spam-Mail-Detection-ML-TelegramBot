# -*- coding: utf-8 -*-
"""SPAM MAIL DETECTION PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NfIE55XVTCCL_S-AM6C3Jzzi00_aWElc

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Pre-Processing"""

# loading the data from csv file to a pandas Dataframe
raw_mail_data = pd.read_csv('/content/mail_data.csv')

# replace the null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

# printing the first 5 rows of the dataframe
mail_data.head()

# checking the number of rows and columns in the dataframe
mail_data.shape

"""Label Encoding"""

# label spam mail as 0;  ham mail as 1;

mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

"""spam  -  0

ham  -  1
"""

# separating the data as texts and label

X = mail_data['Message']

Y = mail_data['Category']

print(X)

print(Y)

"""Splitting the data into training data & test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""Feature Extraction"""

# transform the text data to feature vectors that can be used as input to the Logistic regression

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train)

print(X_train_features)

"""Training the Model

Logistic Regression
"""

model = LogisticRegression()

# training the Logistic Regression model with the training data
model.fit(X_train_features, Y_train)

"""Evaluating the trained model"""

# prediction on training data

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print('Accuracy on training data : ', accuracy_on_training_data)

# prediction on test data

prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)

print('Accuracy on test data : ', accuracy_on_test_data)

"""Building a Predictive System"""

input_mail = ["I've been searching for the right words to thank you for this breather. I promise i wont take your help for granted and will fulfil my promise. You have been wonderful and a blessing at all times"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# making prediction

prediction = model.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')

#installing the required packages and modules
!pip install python-telegram-bot==13.7.0

#installing the required packages and modules
!pip install python-telegram-bot==13.7.0

from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import joblib

# Define the Telegram bot token
TOKEN = 'KEEP YOUR TOKEN ID'

# Load the data and preprocess it
mail_data = pd.read_csv('/content/mail_data.csv')
mail_data['Category'] = mail_data['Category'].map({'spam': 0, 'ham': 1})
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(mail_data['Message'])
Y = mail_data['Category']

# Train the model
model = LogisticRegression()
model.fit(X, Y)

# Define a command handler for the /start command
def start(update: Update, context: CallbackContext) -> None:
    context.bot.send_message(chat_id=update.effective_chat.id, text="Hello! Please enter your message.")

# Define a message handler
def handle_message(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text

    # Convert text to feature vectors
    input_mail_features = vectorizer.transform([user_input])

    # Make prediction
    prediction = model.predict(input_mail_features)

    response = 'Ham mail' if prediction[0] == 1 else 'Spam mail'
    context.bot.send_message(chat_id=update.effective_chat.id, text=response)

def main() -> None:
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    start_handler = CommandHandler('start', start)
    message_handler = MessageHandler(Filters.text & (~Filters.command), handle_message)

    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(message_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
